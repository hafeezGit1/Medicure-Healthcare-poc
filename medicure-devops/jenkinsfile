pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        CLUSTER_NAME = 'medicure-cluster'
    }
    
    stages {
        stage('1. Checkout Code') {
            steps {
                echo '========== Checking out code from GitHub =========='
                checkout scm
            }
        }
        
        stage('2. Build with Maven') {
            steps {
                echo '========== Building Application =========='
                sh 'mvn clean compile'
            }
        }
        
        stage('3. Run Unit Tests') {
            steps {
                echo '========== Running Unit Tests =========='
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('4. Package Application') {
            steps {
                echo '========== Packaging Application =========='
                sh 'mvn package -DskipTests'
            }
        }
        
        stage('5. Build Docker Image') {
            steps {
                echo '========== Building Docker Image =========='
                sh '''
                    cp docker/Dockerfile .
                    docker build -t medicure-app:${BUILD_NUMBER} .
                    docker tag medicure-app:${BUILD_NUMBER} medicure-app:latest
                '''
            }
        }
        
        stage('6. Push to ECR') {
            steps {
                echo '========== Pushing to Amazon ECR =========='
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                                credentialsId: 'aws-credentials']]) {
                    sh '''
                        ECR_URL=$(aws ecr describe-repositories \
                            --repository-names medicure-app \
                            --region ${AWS_REGION} \
                            --query 'repositories[0].repositoryUri' \
                            --output text)
                        
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_URL}
                        
                        docker tag medicure-app:${BUILD_NUMBER} ${ECR_URL}:${BUILD_NUMBER}
                        docker tag medicure-app:${BUILD_NUMBER} ${ECR_URL}:latest
                        
                        docker push ${ECR_URL}:${BUILD_NUMBER}
                        docker push ${ECR_URL}:latest
                        
                        echo ${ECR_URL}:${BUILD_NUMBER} > ecr_image.txt
                    '''
                }
            }
        }
        
        stage('7. Provision Test Cluster') {
            steps {
                echo '========== Verifying Infrastructure with Terraform =========='
                dir('terraform') {
                    sh '''
                        terraform init
                        terraform plan
                        terraform apply -auto-approve
                    '''
                }
            }
        }
        
        stage('8. Configure with Ansible') {
            steps {
                echo '========== Configuring Cluster with Ansible =========='
                sh '''
                    aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME}
                    ansible-playbook -i ansible/inventory/hosts.ini \
                        ansible/playbooks/configure-cluster.yml
                '''
            }
        }
        
        stage('9. Deploy to Test') {
            steps {
                echo '========== Deploying to Test Environment =========='
                sh '''
                    ECR_IMAGE=$(cat ecr_image.txt)
                    
                    sed -i "s|ECR_IMAGE_PLACEHOLDER|${ECR_IMAGE}|g" kubernetes/deployment.yaml
                    
                    export NAMESPACE=medicure-test
                    ansible-playbook -i ansible/inventory/hosts.ini \
                        ansible/playbooks/deploy-app.yml
                    
                    kubectl get svc medicure-service -n medicure-test
                '''
            }
        }
        
        stage('10. Run Selenium Tests') {
            steps {
                echo '========== Running Automated Tests =========='
                sh '''
                    # Wait for LoadBalancer
                    sleep 60
                    
                    # Get application URL
                    APP_LB=$(kubectl get svc medicure-service -n medicure-test \
                        -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                    
                    export APP_URL="http://${APP_LB}/medicure"
                    
                    cd selenium
                    mvn clean test
                '''
            }
            post {
                always {
                    junit '**/selenium/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('11. Deploy to Production') {
            when {
                branch 'master'
            }
            steps {
                echo '========== Deploying to Production =========='
                sh '''
                    export NAMESPACE=medicure-prod
                    ansible-playbook -i ansible/inventory/hosts.ini \
                        ansible/playbooks/deploy-app.yml
                    
                    echo "========== Production Deployment Complete =========="
                    kubectl get all -n medicure-prod
                '''
            }
        }
        
        stage('12. Deploy Monitoring') {
            steps {
                echo '========== Deploying Prometheus & Grafana =========='
                sh '''
                    kubectl apply -f monitoring/prometheus-config.yaml -n medicure-prod
                    kubectl apply -f monitoring/prometheus-deployment.yaml -n medicure-prod
                    kubectl apply -f monitoring/grafana-deployment.yaml -n medicure-prod
                    
                    kubectl rollout status deployment/prometheus -n medicure-prod --timeout=180s
                    kubectl rollout status deployment/grafana -n medicure-prod --timeout=180s
                    
                    echo "========== Monitoring Endpoints =========="
                    kubectl get svc -n medicure-prod | grep -E 'prometheus|grafana'
                '''
            }
        }
    }
    
    post {
        success {
            echo '========== Pipeline Executed Successfully =========='
        }
        failure {
            echo '========== Pipeline Failed =========='
        }
        always {
            cleanWs()
        }
    }
}